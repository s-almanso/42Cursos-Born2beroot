
Project overview
-------------------
- How a virtual machine works:
> A virtual machines packages an operating system with the resources in needs such as CPU, Memory, storage and networking.
> Multiple virtual machines with different operating systems, can run simultaneously and independently within the same host computer.


- Choice of operating system:
> Debian
$ uname -a

- The basic differences between CentOS and Debian:
CentOS:
- More stable and supported by a larger community.
- CentOS doesn't support many different architectures.
- It does not have an easy GUI
- CentOS is updated every 5 years.

Debin:
- has up to date packages and is easier to upgrade to newer versions.
- it has desktop friendly appications a GUI(Graphical interface).
- New versions of Debian are usually released with a 2 years gap,
  so there is enough time to test and fix bugs. Hence these systems are more stable.

- The purpose of virtual machines:
Virtual machines are used to allow more operating system run a single machine.
the physical machine is called a host while the VMs are called guests.
Virtual machines are intended to increase server utilization by running more applications per server.
This consolidation of underutilized servers helps organizations improve operational efficiency and reduce costs.

- The difference between aptitude and apt:
Aptitude and apt are both tools that handle package managment that handle packages installation, removal, search, etc.

APT:is a low lvl package manager

APTITUDE: is a higher-lvl package manager 

Aptitude is vaster in functionality than apt-get and integrates functionalities of apt-get and its other variants including apt-mark and apt-cache.

- What APPArmor is: it provides seurity by providing Mandatory Access Control(MAC) security.
It uses LSM kernel enhancements to restrict programs to certain resources. AppArmor does this with profiles loaded into the kernel when the system starts. Apparmor has two types of profile modes, enforcement and complain.

Simple setup
----------------

- root pass: S@l@m@@li3633

- username : salmanso
- username pass : S@l@m@@li3633

- Check that the UFW:
$ sudo ufw status

- Check that the SSH is started:
$ sudo systemctl status ssh

(in terminal)
$ ssh salmanso@127.0.0.1 -p 4242

- Check that the chosen operating system is Debian or CentOS:
$ uname -v

USER
----------------

-Check the user is added to the sudo group:
$ getent group sudo

- Check Password policy:
$ sudo vim /etc/pam.d/common-password

> pass at least 10char long : minlen = 10
> min one upper-case letter: ucredit = -1
> min one lower-case letter: lcredit = -1
> min one digit: dcredit = -1
> max same letter repetition 3: maxrepeat=3
> check if the password contains the username: usercheck=0
> min number of charachters different from the old pass: difok=7
> same policy for root: enforce_for_root

- Password Expiration:
$ sudo vim /etc/login.defs

- Create a new user:
$ sudo adduser <new_username>

- Create a new Group:
$ sudo groupadd <new_groupname>

- Check if the new_group was created:
$ getent group

- assign the new_user to the new_group:
$ sudo usermod -aG <new_group> <new_username>

- Check if user in Group:
$ getent group <new_group>  

- Check if password rules apply to user:
$ chage -l <new_username>

Hostname and partitions
-------------------------
- Check current hostname:
$ hostnamectl

- Change the hostname:
$ hostnamectl set-hostname <new_hostname>
> change the hostname in the hosts file: $ sudo vim /etc/hosts
> replace the old_hostname with the new_hostname
$ sudo reboot

- View the partition:
$ lsblk

SUDO
-----------------

- Check that "sudo" program is installed:
$ sudo -V
$ sudo dpkg -l | grep sudo

- Assign new user to the "sudo" group.
$ usermod -aG sudo <new_user>

- Check if it was successfully assigned:
$ getent group sudo

- The subject imposes strict rules for sudo;
the value and operation of sudo using examples.

- the implementation of the rules imposed by the subject:
$ sudo visodu
- Verify that the "/var/log/sudo/" folder exists and has at least one file. Check the contents of the files in this folder, You should see a history of the commands used with sudo. Finally, try to run a command via sudo. See if the file (s) in the "/var/log/sudo/" folder have been updated.

> Why use tty? If some non-root code is exploited (a PHP script, for example), the requiretty option means that the exploit cod won't be able to directly upgrade its privileges by running sudo.

UFW

- Check that the "UFW" program is properly installed on the virtual machine.

- Check that it is working properly.
The student being evaluated should explain to you basically what UFW is and the value of using it.

- List the active rules in UFW. A rule must exist for port 4242.

- Add a new rule to open port 8080. Check that this one has been added by listing the active rules.

- Finally, delete this new rule with the help of the student being evaluated. If something does not work as expected or is not clearly explained, the evaluation stops here.

SSH

- Check that the SSH service is properly installed on the virtual machine.

- Check that it is working properly.

- The student being evaluated must be able to explain to you basically what SSH is and the value of using it.

- Verify that the SSH service only uses port 4242.

- The student being evaluated should help you use SSH in order to log in with the newly created user. To do this, you can use a key or a simple password. It will depend on the student being evaluated. Of course, you have to make sure that you cannot use SSH with the "root" user as stated in the subject. If something does not work as expected or is not clearly explained, the evaluation stops here.

Script monitoring

The student being evaluated should explain to you simply: How their script works by showing you the code.

- What "cron" is.

- How the student being evaluated set up their script so that it runs every 10 minutes from when the server starts. Once the correct functioning of the script has been verified, the student being evaluated should ensure that this script runs every minute.

You can run whatever you want to make sure the script runs with dynamic values correctly.

Finally, the student being evaluated should make the script stop running when the server has started up, but without modifying the script itself. To check this point, you will have to restart the server one last time. At startup, it will be necessary to check that the script still exists in the same place, that its rights have remained unchanged, and that it has not been modified. If something does not work as expected or is not clearly explained, the evaluation stops here.

Bonus Evaluate

the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.

Bonus Check, with the help of the subject and the student being evaluated, the bonus points authorized for this project:
- Setting up partitions is worth 2 points.
- Setting up WordPress, only with the services required by the subject, is worth 2 points.
- The free choice service is worth 1 point.
Verify and test the proper functioning and implementation of each extra service. For the free choice service, the student being evaluated has to give you a simple explanation about how it works and why they think it is useful. Please note that NGINX and Apache2 are prohibited.
